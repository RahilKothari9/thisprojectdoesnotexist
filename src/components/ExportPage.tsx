import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

interface SessionData {
  projectConfig: {
    name: string;
    instructions: string;
  };
  visitedPages: string[];
  pageCache: Map<string, string>;
  generationPrompts: string[];
  sessionStartTime: Date;
}

export default function ExportPage() {
  const navigate = useNavigate();
  const [sessionData, setSessionData] = useState<SessionData | null>(null);
  const [sessionDuration, setSessionDuration] = useState<number>(0);

  useEffect(() => {
    // Load session data from localStorage
    const storedData = localStorage.getItem('exportSessionData');
    if (storedData) {
      const parsed = JSON.parse(storedData);
      // Convert pageCache from object back to Map
      const pageCache = new Map(Object.entries(parsed.pageCache || {}));
      const sessionStartTime = new Date(parsed.sessionStartTime);
      
      const fullSessionData = {
        ...parsed,
        pageCache,
        sessionStartTime
      };
      
      setSessionData(fullSessionData);
      setSessionDuration(Math.round((new Date().getTime() - sessionStartTime.getTime()) / 1000 / 60));
    } else {
      // No session data found, redirect to home
      navigate('/');
    }
  }, [navigate]);

  const handleDownload = (downloadType: string) => {
    if (!sessionData) return;

    switch (downloadType) {
      case 'projectFiles':
        const zip = Array.from(sessionData.pageCache.entries()).map(([path, content]) => {
          const filename = path === '/' ? 'index.html' : path.replace('/', '') + '.html';
          return { filename, content };
        });
        
        // Download individual files
        zip.forEach(file => {
          const blob = new Blob([file.content], { type: 'text/html' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = file.filename;
          a.click();
          URL.revokeObjectURL(url);
        });
        break;

      case 'promptLog':
        const logContent = [
          "ThisProjectDoesNotExist - AI Generation Log",
          "=".repeat(50),
          "Project: " + sessionData.projectConfig.name,
          "Instructions: " + (sessionData.projectConfig.instructions || "None provided"),
          "Session Start: " + sessionData.sessionStartTime,
          "Total Pages: " + sessionData.visitedPages.length,
          "",
          "Generation Prompts:",
          "=".repeat(20),
          ...sessionData.generationPrompts,
          "",
          "Visited Pages:",
          "=".repeat(15),
          ...sessionData.visitedPages.map((page: string) => "- " + page),
          "",
          "Generated by ThisProjectDoesNotExist",
          "https://github.com/yourproject/thisprojectdoesnotexist"
        ].join("\n");
        
        const logBlob = new Blob([logContent], { type: 'text/plain' });
        const logUrl = URL.createObjectURL(logBlob);
        const logA = document.createElement('a');
        logA.href = logUrl;
        logA.download = sessionData.projectConfig.name.replace(/\s+/g, '_') + '_generation_log.txt';
        logA.click();
        URL.revokeObjectURL(logUrl);
        break;

      case 'fullSession':
        // Convert Map back to object for JSON serialization
        const exportData = {
          ...sessionData,
          pageCache: Object.fromEntries(sessionData.pageCache)
        };
        
        const sessionBlob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
        const sessionUrl = URL.createObjectURL(sessionBlob);
        const sessionA = document.createElement('a');
        sessionA.href = sessionUrl;
        sessionA.download = sessionData.projectConfig.name.replace(/\s+/g, '_') + '_session.json';
        sessionA.click();
        URL.revokeObjectURL(sessionUrl);
        break;

      default:
        console.error('Unknown download type:', downloadType);
    }
  };

  const handleStartNewSession = () => {
    localStorage.removeItem('exportSessionData');
    localStorage.removeItem('projectConfig');
    navigate('/');
  };

  if (!sessionData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-slate-700/50 rounded-2xl flex items-center justify-center mb-6 mx-auto">
            <svg className="w-8 h-8 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
          <h1 className="text-xl font-semibold text-slate-200 mb-2">Loading Export Data...</h1>
          <p className="text-slate-400">Please wait while we prepare your session data.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 p-6">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-gradient-to-r from-blue-500 to-purple-600 rounded-3xl flex items-center justify-center mb-6 mx-auto">
            <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </div>
          <h1 className="text-3xl font-bold text-white mb-3">Session Complete! ðŸŽ‰</h1>
          <p className="text-lg text-slate-300 leading-relaxed max-w-2xl mx-auto">
            Your AI-generated project <strong className="text-blue-400">{sessionData.projectConfig.name}</strong> is ready for download.
          </p>
        </div>

        {/* Session Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <Card className="bg-slate-800/50 border-slate-700">
            <CardContent className="p-6 text-center">
              <div className="text-3xl font-bold text-blue-400 mb-2">{sessionData.visitedPages.length}</div>
              <div className="text-slate-300">Pages Generated</div>
            </CardContent>
          </Card>
          <Card className="bg-slate-800/50 border-slate-700">
            <CardContent className="p-6 text-center">
              <div className="text-3xl font-bold text-green-400 mb-2">{sessionDuration}</div>
              <div className="text-slate-300">Minutes</div>
            </CardContent>
          </Card>
          <Card className="bg-slate-800/50 border-slate-700">
            <CardContent className="p-6 text-center">
              <div className="text-3xl font-bold text-purple-400 mb-2">{sessionData.generationPrompts.length}</div>
              <div className="text-slate-300">AI Generations</div>
            </CardContent>
          </Card>
        </div>

        {/* Download Section */}
        <Card className="bg-slate-800/50 border-slate-700 mb-8">
          <CardHeader>
            <CardTitle className="text-xl text-slate-200">Download Your Project</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Button
                onClick={() => handleDownload('projectFiles')}
                className="bg-blue-600 hover:bg-blue-700 text-white h-auto p-4 flex flex-col items-center space-y-2"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <div>
                  <div className="font-semibold">Download All Pages</div>
                  <div className="text-sm opacity-80">(.html files)</div>
                </div>
              </Button>

              <Button
                onClick={() => handleDownload('promptLog')}
                className="bg-green-600 hover:bg-green-700 text-white h-auto p-4 flex flex-col items-center space-y-2"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <div>
                  <div className="font-semibold">Download AI Chat Log</div>
                  <div className="text-sm opacity-80">(.txt file)</div>
                </div>
              </Button>

              <Button
                onClick={() => handleDownload('fullSession')}
                className="bg-purple-600 hover:bg-purple-700 text-white h-auto p-4 flex flex-col items-center space-y-2"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2v0M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2" />
                </svg>
                <div>
                  <div className="font-semibold">Download Session Data</div>
                  <div className="text-sm opacity-80">(.json file)</div>
                </div>
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Pages Generated */}
        <Card className="bg-slate-800/50 border-slate-700 mb-8">
          <CardHeader>
            <CardTitle className="text-xl text-slate-200">Pages Generated</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              {sessionData.visitedPages.map((page, index) => (
                <div key={index} className="bg-slate-700/50 rounded-lg p-3 text-center">
                  <div className="text-slate-300 font-mono text-sm">
                    {page === '/' ? 'index.html' : page.replace('/', '') + '.html'}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Actions */}
        <div className="text-center">
          <Button
            onClick={handleStartNewSession}
            variant="outline"
            className="border-slate-600 text-slate-300 hover:bg-slate-700 hover:text-white"
          >
            Start New Project
          </Button>
        </div>
      </div>
    </div>
  );
}
